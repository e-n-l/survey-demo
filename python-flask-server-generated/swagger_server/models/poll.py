# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.poll_answer import PollAnswer  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class Poll(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, question: str=None, poll_id: int=None, user_id: int=None, editable: bool=None, voted: List[User]=None, options: List[PollAnswer]=None):  # noqa: E501
        """Poll - a model defined in Swagger

        :param question: The question of this Poll.  # noqa: E501
        :type question: str
        :param poll_id: The poll_id of this Poll.  # noqa: E501
        :type poll_id: int
        :param user_id: The user_id of this Poll.  # noqa: E501
        :type user_id: int
        :param editable: The editable of this Poll.  # noqa: E501
        :type editable: bool
        :param voted: The voted of this Poll.  # noqa: E501
        :type voted: List[User]
        :param options: The options of this Poll.  # noqa: E501
        :type options: List[PollAnswer]
        """
        self.swagger_types = {
            'question': str,
            'poll_id': int,
            'user_id': int,
            'editable': bool,
            'voted': List[User],
            'options': List[PollAnswer]
        }

        self.attribute_map = {
            'question': 'question',
            'poll_id': 'poll_id',
            'user_id': 'user_id',
            'editable': 'editable',
            'voted': 'voted',
            'options': 'options'
        }
        self._question = question
        self._poll_id = poll_id
        self._user_id = user_id
        self._editable = editable
        self._voted = voted
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'Poll':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Poll of this Poll.  # noqa: E501
        :rtype: Poll
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question(self) -> str:
        """Gets the question of this Poll.


        :return: The question of this Poll.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question: str):
        """Sets the question of this Poll.


        :param question: The question of this Poll.
        :type question: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")  # noqa: E501

        self._question = question

    @property
    def poll_id(self) -> int:
        """Gets the poll_id of this Poll.


        :return: The poll_id of this Poll.
        :rtype: int
        """
        return self._poll_id

    @poll_id.setter
    def poll_id(self, poll_id: int):
        """Sets the poll_id of this Poll.


        :param poll_id: The poll_id of this Poll.
        :type poll_id: int
        """

        self._poll_id = poll_id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Poll.


        :return: The user_id of this Poll.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Poll.


        :param user_id: The user_id of this Poll.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def editable(self) -> bool:
        """Gets the editable of this Poll.


        :return: The editable of this Poll.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable: bool):
        """Sets the editable of this Poll.


        :param editable: The editable of this Poll.
        :type editable: bool
        """

        self._editable = editable

    @property
    def voted(self) -> List[User]:
        """Gets the voted of this Poll.


        :return: The voted of this Poll.
        :rtype: List[User]
        """
        return self._voted

    @voted.setter
    def voted(self, voted: List[User]):
        """Sets the voted of this Poll.


        :param voted: The voted of this Poll.
        :type voted: List[User]
        """

        self._voted = voted

    @property
    def options(self) -> List[PollAnswer]:
        """Gets the options of this Poll.


        :return: The options of this Poll.
        :rtype: List[PollAnswer]
        """
        return self._options

    @options.setter
    def options(self, options: List[PollAnswer]):
        """Sets the options of this Poll.


        :param options: The options of this Poll.
        :type options: List[PollAnswer]
        """

        self._options = options
